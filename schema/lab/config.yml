- name: Deadline
  mkdir: false
  imports:
  - '"time"'
  - '"gopkg.in/yaml.v3"'
  base: |-
    struct {
        Time time.Time `yaml:"time" json:"time"`
        Score float32 `yaml:"score" json:"score"`
    }
  listtype: '[]Deadline'
  init: |-
    const (
        format = "2006-01-02 15:04:05"
    )

    func (c Deadline) MarshalYAML() (any, error) {
        return struct {
            Time string `yaml:"time"`
            Score float32 `yaml:"score"`
        }{
            Time: c.Time.Format(format),
            Score: c.Score,
        }, nil
    }

    func (c *Deadline) UnmarshalYAML(b *yaml.Node) error {
        var tmp struct {
            Time string `yaml:"time"`
            Score float32 `yaml:"score"`
        }
        err := b.Decode(&tmp)
        if err != nil {
            return err
        }
        if tmp.Time == "" {
            tmp.Time = "9999-12-31 23:59:59"
        }
        tmptime, err := time.ParseInLocation(format, tmp.Time, time.Local)
        if err != nil {
            return err
        }
        *c = Deadline{
            Time: tmptime,
            Score: c.Score,
        }
        return nil
    }
- name: Command
  mkdir: false
  imports: []
  base: |-
    struct {
        Exec []string `yaml:"exec" json:"exec"`
        Worker worker `yaml:"worker" json:"worker"`
    }
  listtype: '[]Command'
  init: ""
- name: Content
  mkdir: false
  imports: 
  - 'contenttype "github.com/NCKU-NASA/nasa-judge-lib/enum/content_type"'
  base: |-
    struct {
        Type contenttype.ContentType `yaml:"type" json:"type"`
        Name string `yaml:"name" json:"name"`
        Data string `yaml:"-" json:"data,omitempty"`
    }
  listtype: '[]Content'
  init: ""
- name: CheckPoint
  mkdir: false
  imports: []
  base: |-
    struct {
        Message string `yaml:"message" json:"message"`
        Weight float32 `yaml:"weight" json:"weight"`
        Commands Commands `yaml:"commands" json:"commands,omitempty"`
        Dependencies map[string]int `yaml:"dependencies" json:"dependencies,omitempty"`
        Correct bool `yaml:"-" json:"correct"`
    }
  listtype: 'map[string][]CheckPoint'
  init: ""


